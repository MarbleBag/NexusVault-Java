package nexusvault.test.tex.jpg;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

import org.junit.jupiter.api.Test;

import nexusvault.format.tex.jpg.tools.Sampler;

class SamplerTest {

	@Test
	public void testUpsampler() {
		final var input = new int[] { //
				0x01, 0x02, 0x03, 0x04, //
				0x05, 0x06, 0x07, 0x08, //
				0x09, 0x0A, 0x0B, 0x0C, //
				0x0D, 0x0E, 0x0F, 0x10, //
		};

		final var output = new int[input.length * 4];

		Sampler.upsample(input, 0, 4, 4, 4, 2, output, 0, 8);

		final var expected = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

		assertArrayEquals(expected, output);
	}

	@Test
	public void testUpsamplerInplace() {
		final var input = new int[] { //
				0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, //
				0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, //
				0x09, 0x0A, 0x0B, 0x0C, 0x00, 0x00, 0x00, 0x00, //
				0x0D, 0x0E, 0x0F, 0x10, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //
		};

		Sampler.upsample(input, 0, 4, 4, 8, 2, input, 0, 8);

		final var expected = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

		assertArrayEquals(expected, input);
	}

	@Test
	public void testDownsampler() {
		final var input = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

		final var output = new int[input.length / 4];
		Sampler.downsample(input, 0, 8, 8, 8, 2, output, 0, 4);

		final var expected = new int[] { //
				0x01, 0x02, 0x03, 0x04, //
				0x05, 0x06, 0x07, 0x08, //
				0x09, 0x0A, 0x0B, 0x0C, //
				0x0D, 0x0E, 0x0F, 0x10, //
		};

		assertArrayEquals(expected, output);
	}

	@Test
	public void testDownsamplerInplace() {
		final var input = new int[] { //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

		Sampler.downsample(input, 0, 8, 8, 8, 2, input, 0, 8);

		final var expected = new int[] { //
				0x01, 0x02, 0x03, 0x04, 0x03, 0x03, 0x04, 0x04, //
				0x05, 0x06, 0x07, 0x08, 0x03, 0x03, 0x04, 0x04, //
				0x09, 0x0A, 0x0B, 0x0C, 0x07, 0x07, 0x08, 0x08, //
				0x0D, 0x0E, 0x0F, 0x10, 0x07, 0x07, 0x08, 0x08, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
				0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, //
		};

		assertArrayEquals(expected, input);
	}

}
