typedef byte int8;
typedef ubyte uint8;

uint64 alignt16Byte(uint64 position){
    return (position + 0xF) & 0xFFFFFFFFFFFFFFF0l;
}

struct Header{
        uint32 signature; // XETL
        uint32 version; // 4
        uint32 languageType; 
        uint32 unknown_0c; // ???  
        uint64 tagNameLength; 
        uint64 tagNameOffset; 
        uint64 shortNameLength; 
        uint64 shortNameOffset; 
        uint64 longNameLength; 
        uint64 longNameOffset; 
        uint64 entryCount;
        uint64 entryOffset;
        uint64 unknown_50; // ???
        uint64 textOffset;
} header <bgcolor=cDkGreen>;

FSeek(sizeof(Header) + header.tagNameOffset);
wchar_t tagName[header.tagNameLength] <bgcolor=cLtGreen>;

FSeek(sizeof(Header) + header.shortNameOffset);
wchar_t shortName[header.shortNameLength] <bgcolor=cLtGreen>;

FSeek(sizeof(Header) + header.longNameOffset);
wchar_t longName[header.longNameLength] <bgcolor=cLtGreen>;

struct EntryPtr{
    uint32 id;
    uint32 offset;
};

FSeek(sizeof(Header) + header.entryOffset);
EntryPtr entryPtr[header.entryCount] <bgcolor=cLtYellow>;

struct Entries{
    struct Text{        
        wchar_t str[];        
    };
    local uint64 endOfStruct = FTell();
    local uint i=0;
    for(i=0; i<header.entryCount; ++i){
        FSeek(sizeof(Header) + header.textOffset + entryPtr[i].offset * 2);
        Text entry <bgcolor=cLtGreen, optimize=true>;
    }
}entries;