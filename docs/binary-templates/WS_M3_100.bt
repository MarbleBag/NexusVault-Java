//-------------------------------------------------------------------------
// Copyright (C) 2018-2022 MarbleBag
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>
//
// SPDX-License-Identifier: AGPL-3.0-or-later
//-------------------------------------------------------------------------

typedef byte int8;
typedef ubyte uint8;

struct ArrayPointer(uint32 elementSize){
    uint64 count;
    uint64 offset;
    local uint64 address;
    local uint64 size = elementSize * count;
};

struct DPointer{
    uint64 count;
    uint64 offsetKey;
    uint64 offsetValue;
};

uint64 alignt16Byte(uint64 position){
    return (position + 0xF) & 0xFFFFFFFFFFFFFFF0l;
}

void updateNextPointer(ArrayPointer& pointer, ArrayPointer& source){
    pointer.address = pointer.offset + alignt16Byte(source.address + source.size);
}

void updatePointer(ArrayPointer& pointer, uint64 offset){
    pointer.address = pointer.offset + alignt16Byte(offset);
}

struct M3{
    struct Texture(ArrayPointer& pointer){ //  structSize = 32
        uint8 unk_gap_000[2];
        uint8 textureType;
        uint8 unk_003;
        uint32 unk_004;
        uint8 unk_gap_008[8];
        ArrayPointer ptrTextureName(2);

        updateNextPointer(ptrTextureName, pointer);

        local uint64 endOfStruct = FTell();
        FSeek(ptrTextureName.address);
        wchar_t textureFilename[ptrTextureName.size];
        FSeek(endOfStruct);
    };


    struct Material_Description(ArrayPointer& pointer){ // size 0x140
        uint16 textureId[2];
        uint8 gap_004[20];
        DPointer unk_pointer1[10];
        DPointer unk_pointer2;
        uint unk_offset_120[8];
    };

    struct Material(ArrayPointer& pointer){ // size 0x30
        uint8 unk_gap_000[32];
        ArrayPointer ptrMatDescriptions(0x140) <hidden=true>;

         local int endOfStruct = FTell();

        updateNextPointer(ptrMatDescriptions, pointer);

        if(ptrMatDescriptions.count > 0){
            FSeek(ptrMatDescriptions.address);
            Material_Description matDescriptions(ptrMatDescriptions)[ptrMatDescriptions.count];
        }

        FSeek(endOfStruct);
    };

    struct Vertex(uint8 fields[]){
        if(fields[0]==1){ float xyz[3]; }
        if(fields[0]==2){ int16 xyz[3]; }
        if(fields[1]==3){ int8 field3_unk1[2] <bgcolor=cRed>; }
        if(fields[2]==3){ int8 field3_unk2[2] <bgcolor=cRed>; }
        if(fields[3]==3){ int8 field3_unk3[2] <bgcolor=cRed>; }
        if(fields[4]==4){ uint8 boneIndices[4]; }
        if(fields[5]==4){ uint8 boneWeights[4]; }
        if(fields[6]==4){ uint8 field4_unk1[4]<bgcolor=cRed>; }
        if(fields[7]==4){ uint8 field4_unk2[4]<bgcolor=cRed>; }
        if(fields[8]==5){ hfloat uvMap[2]; }
        if(fields[9]==5){ hfloat uvMap[4]; }
        if(fields[10]==6){ uint8 field4_unk1[1]<bgcolor=cRed>; }
    };

    struct Mesh{ // size 0x70
        uint32 indexStart;
        uint32 vertexStart;
        uint32 indexCount;
        uint32 vertexCount;
        uint8 gap_010[6];
        uint8 materialSelector;
        uint8 gap_017[41];
        float gap_040[4];
        float gap_050[4];
        uint8 gap_060[16];
    };

    struct Geometry(ArrayPointer& pointer){ // size 0xC8
        uint8 gap_008[8];
        ArrayPointer offset_008(1);
        uint32 vertexCount;
        uint16 vertexSize;
        uint16 vertexFlags;
        uint8 vertexFieldTypes[11];
        uint8 vertexFieldPos[11];
        uint16 gap_036;
        ArrayPointer ptrVertexData(0x1) <hidden=true>;
        ArrayPointer offset_048(1);
        ArrayPointer offset_050(1);
        uint32 indexCount;
        uint8 unk_offset_06C[2];
        uint16 padding;
        ArrayPointer indexData(1);
        ArrayPointer ptrMeshes(0x70) <hidden=true>;
        uint32 vertexCount2;
        uint32 gap_093;
        ArrayPointer meshVertexRange(1) <hidden=true>;
        ArrayPointer offset_0A8(1);
        ArrayPointer offset_0B8(1);

         local int endOfStruct = FTell();

        updateNextPointer(offset_008, pointer);
        updateNextPointer(ptrVertexData, pointer);
        updateNextPointer(offset_048, pointer);
        updateNextPointer(offset_050, pointer);
        updateNextPointer(indexData, pointer);
        updateNextPointer(ptrMeshes, pointer);
        updateNextPointer(meshVertexRange, pointer);
        updateNextPointer(offset_0A8, pointer);
        updateNextPointer(offset_0B8, pointer);

        if(ptrMeshes.count>0){
            FSeek(ptrMeshes.address);
            Mesh meshes[ptrMeshes.count] <bgcolor=cGreen>;
        }

        if(ptrVertexData.count>0){
            FSeek(ptrVertexData.address);
            Vertex vertex(vertexFieldTypes)[vertexCount] <bgcolor=cDkGreen>;
        }

        if(meshVertexRange.count>0){
            FSeek(meshVertexRange.address);
            uint32 MeshVertexStartEnd[meshVertexRange.count];
        }

        FSeek(endOfStruct);
    };

    struct Bone(ArrayPointer& pointer){ // size 0x160
        uint32 gap_000;
        int16 parentBone;
        uint8 gap_006[2];
        uint8 gap_008[4];
        uint32 padding_00C <hidden=true>;
        DPointer offset_010[4];
        DPointer animation[2];
        DPointer offset_0A0[2];
        float matrix_A[16];
        float matrix_B[16];
        float xyz[3];
        uint32 padding_15C <hidden=true>;
    };

    struct M3_Header{
        char signature[4];
        uint version;
        uint8 gap_008[8];
        ArrayPointer unk_offset_010(1);
        DPointer unk_offset_020;
        DPointer unk_offset_038;
        DPointer unk_offset_050;
        DPointer unk_offset_068;
        ArrayPointer unk_offset_080(1);
        DPointer unk_offset_090;
        DPointer unk_offset_0A8;
        DPointer unk_offset_0C0;
        DPointer unk_offset_0D8;
        ArrayPointer unk_offset_0F0(1);
        DPointer unk_offset_100;
        DPointer unk_offset_118;
        DPointer unk_offset_130;
        DPointer unk_offset_148;
        DPointer unk_offset_160;
        uint8 gap_178[8];
        ArrayPointer ptrBones(0x160) <hidden=true>;
        ArrayPointer unk_offset_190(1);
        ArrayPointer unk_offset_1A0(1);
        ArrayPointer ptrBoneMap(0x2) <hidden=true>;
        ArrayPointer ptrTextures(0x20) <hidden=true>;
        ArrayPointer unk_offset_1D0(0x2); // 2
        ArrayPointer unk_offset_1E0(0x98); // 152
        ArrayPointer ptrMaterials(0x30) <hidden=true>;
        ArrayPointer unk_offset_200(0x4); // 4
        ArrayPointer unk_offset_210(0x2); // 2
        ArrayPointer unk_offset_220(0x46); // 70
        ArrayPointer unk_offset_230(0x4); // 4
        ArrayPointer unk_offset_240(0x70); // 112
        ArrayPointer ptrGeometry(0xC8) <hidden=true>;
        ArrayPointer unk_offset_260(0x4); // 4
        ArrayPointer unk_offset_270(0x2); // 2
        ArrayPointer unk_offset_280(0x8); // 8
        DPointer unk_offset_290; // 4, 2
        ArrayPointer unk_offset_2A8(0x10); // 16
        ArrayPointer unk_offset_2B8(0x28); // 40
        ArrayPointer unk_offset_2C8(0x8); // 8
        ArrayPointer unk_offset_2D8(0x2); // 2
        ArrayPointer unk_offset_2E8(0x8); // 8
        ArrayPointer unk_offset_2F8(0xA0); // 160
        ArrayPointer unk_offset_308(0x50); // 80
        ArrayPointer unk_offset_318(0x190); // 400
        ArrayPointer unk_offset_328(0x38); // 56
        ArrayPointer unk_offset_338(0x2); // 2
        uint8 gap_348[8];
        DPointer unk_offset_350; // 4, 4
        uint8 gap_368[8];
        DPointer unk_offset_370; // 4, 4
        uint8 gap_388[264];
        ArrayPointer unk_offset_490(1); // ?
        ArrayPointer unk_offset_4A0(0x4); // 4
        uint8 gap_4B0[96];
        ArrayPointer unk_offset_510(0x10); // 16
        ArrayPointer unk_offset_520(0x4); // 4
        ArrayPointer unk_offset_530(0x4); // 4
        ArrayPointer unk_offset_540(0x68); // 104
        ArrayPointer unk_offset_550(0x2); // 2
        ArrayPointer unk_offset_560(0xA0); // 160
        ArrayPointer unk_offset_570(0x20); // 32
        uint8 gap_580[8];
        ArrayPointer unk_offset_588(0x20); // 32
        ArrayPointer unk_offset_598(0x4C); // 76
        ArrayPointer unk_offset_5A8(0x2); // 2
        uint8 gap_5B8[8];
        DPointer unk_offset_5C0;
        uint8 gap_5D8[88];

        local int endOfHeader = FTell();

        updatePointer(ptrBoneMap, endOfHeader);
        updatePointer(ptrBones, endOfHeader);
        updatePointer(ptrTextures, endOfHeader);
        updatePointer(ptrMaterials, endOfHeader);
        updatePointer(ptrGeometry, endOfHeader);

        if(ptrBoneMap.count > 0){
            FSeek(ptrBoneMap.address);
            uint16 boneMap[ptrBoneMap.count];
        }
        if(ptrBones.count > 0){
            FSeek(ptrBones.address);
            struct Bones {
                Bone bones(ptrBones)[ptrBones.count] <bgcolor=cLtYellow, optimize=false>;
            } bones;
        }
        if(ptrTextures.count > 0){
            FSeek(ptrTextures.address);
            struct Textures {
                Texture textures(ptrTextures)[ptrTextures.count] <bgcolor=cLtYellow, optimize=false>;
            } textures;
        }
        if(ptrMaterials.count > 0){
            FSeek(ptrMaterials.address);
            struct Materials {
                Material materials(ptrMaterials)[ptrMaterials.count] <bgcolor=cLtBlue, optimize=false>;
            } materials;
        }
        if(ptrGeometry.count > 0){
            FSeek(ptrGeometry.address);
            struct Geometries {
                Geometry geometries(ptrGeometry)[ptrGeometry.count] <bgcolor=cLtGreen, optimize=false>;
            } geometries;
        }

        FSeek(endOfHeader);
    } header <bgcolor=cLtGray, optimize=false>;

}file;
