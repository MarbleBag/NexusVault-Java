typedef byte int8;
typedef ubyte uint8;

uint64 alignt16Byte(uint64 position){
    return (position + 0xF) & 0xFFFFFFFFFFFFFFF0l;
}

struct Tbl{
    struct Header{
        uint32 signature; // LBTD
        uint32 version; // 0
        uint64 nameCount;
        uint64 unknown_1;
        uint64 recordSize;
        uint64 fieldCount;
        uint64 fieldOffset;
        uint64 recordCount;
        uint64 totalRecordSize;
        uint64 recordOffset;
        uint64 lookupCount;
        uint64 lookupOffset;
        uint64 padding_4;        
    } header <bgcolor=cDkGreen>;

    wchar_t tableName[header.nameCount] <bgcolor=cLtGreen>;
    // padded to 16 byte


    struct Field{
        uint32 nameCount;
        uint32 unknown_1;
        uint64 nameOffset;
        uint16 dataType;
        uint16 padding_1;
        uint32 unknown_2; //24 for int, 104 for string
    };

    FSeek(sizeof(Header) + header.fieldOffset);
    Field fields[header.fieldCount] <bgcolor=cLtYellow>;
    FSeek(alignt16Byte(FTell()));
    // padded to 16 byte

    struct FieldNames {
        struct FieldName(uint32 length){        
            wchar_t fieldName[length];        
        };

        local uint64 endOfFields = FTell();
        local uint i=0;
        for(i=0; i<header.fieldCount; ++i){
            FSeek(endOfFields + fields[i].nameOffset);
            FieldName fieldName(fields[i].nameCount) <bgcolor=cLtGreen, optimize=true>;
            //each padded to 16 byte
        }
    }fieldNames;

    struct Record {
        local uint i=0;
        local uint64 oldPosition;
        for(i=0;i<header.fieldCount;++i){
            if(fields[i].dataType == 3){                
                int32 v1 <comment="Int", bgcolor=0xA43000>;
            }else if(fields[i].dataType == 4){
                float v2 <comment="Float", bgcolor=0xA43000>;      
            }else if(fields[i].dataType == 11){
                int32 v3 <comment="Bool", bgcolor=0xA43000>; 
            }else if(fields[i].dataType == 20){
                int64 v4 <comment="Long", bgcolor=0xA43000>;    
            }else if(fields[i].dataType == 130){
                if( FTell() % 8 != 0 ) // string pointer are 8-byte aligned
                    uint32 padding <bgcolor=0x000>;
                uint64 strPointer <comment="Str", bgcolor=0xA4A000>;
 
                oldPosition = FTell();
                FSeek(sizeof(Header) + header.recordOffset + strPointer);
                struct RecordName{
                    wchar_t str[] <bgcolor=cLtGreen>;
                }name;
                FSeek(oldPosition);
            }
        }
    };

    struct Records {
        local uint i=0;
        for(i=0; i<header.recordCount; ++i){
            FSeek(sizeof(Header) + header.recordOffset + i * header.recordSize);
            Record record <bgcolor=cLtPurple, optimize=true>;
        }
    }records;


    FSeek(sizeof(Header) + header.recordOffset + header.totalRecordSize);
    uint8 EndOfRecord <bgcolor=cLtBlue>;
    //padded to 16 byte
    
    //maps Id -> record idx, -1 means no index
    FSeek(sizeof(Header) + header.lookupOffset);
    int32 lookup[header.lookupCount] <bgcolor=cLtRed>;
    //padded to 16 byte
}file;

