//-------------------------------------------------------------------------
// Copyright (C) 2018-2022 MarbleBag
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>
//
// SPDX-License-Identifier: AGPL-3.0-or-later
//-------------------------------------------------------------------------

typedef byte int8;
typedef ubyte uint8;

uint64 align16Byte(uint64 position){
    return (position + 0xF) & 0xFFFFFFFFFFFFFFF0l;
}

struct FileHeader{
    uint32 signature;
    uint32 version;
    uint8  tempMemory[512];
    uint64 fileSize;
    uint64 unknown_210;
    uint64 indexTableOffset;
    uint32 indexTableCount;
    uint32 unknown_224;
    uint64 rootIdx;
}header <bgcolor=cDkGreen>;

local uint64 minimalOffset = sizeof(FileHeader) + sizeof(int64);



struct INDEX_ENTRY{
    uint64 offset;
    uint64 size;
};

struct ROOT_ELEMENT{
    uint32 signature;
    uint32 version;
    uint32 entryCount;
    uint32 rootIdx;
};

if(header.indexTableOffset > minimalOffset){
    FSeek(header.indexTableOffset);
    INDEX_ENTRY packIndex[header.indexTableCount] <bgcolor=cBlue, comment=IndexEntryComment>;
    local int i <hidden=true>;
    local int64 zeroSizedIndices = 0;
    for(i = 0; i < header.indexTableCount; i++ )
        if( packIndex[i].size == 0 )
            zeroSizedIndices += 1;
}

string IndexEntryComment( INDEX_ENTRY& index){
    if(index.size == 0){
        if(index.offset == 0){
            return "Zero size & offset";
        }
        return "Zero size";
    }
    return "";
}

if(header.rootIdx > 0 && exists(packIndex)){
    FSeek(packIndex[header.rootIdx].offset);
    ROOT_ELEMENT rootElement <bgcolor=cYellow>;
}

struct MEM_BLOCK(int64 size){
    int64 guardFront <bgcolor=0x0099FF>;
    uint8 data[size];
    int64 guardEnd <bgcolor=0x007ACC>;
};



FSeek(sizeof(FileHeader)+sizeof(int64));
struct MEM_BLOCKS{
    local int64 blockGuard <hidden=true>;
    local int64 emptyBlocks;
    local int64 unusedBlocks;
    local int64 fullBlocks;
    local int64 totalBlocks;
    while(!FEof()){
        blockGuard = ReadInt64();
        if(blockGuard > 0){
            MEM_BLOCK block(blockGuard);
            fullBlocks += 1;
        }else if(blockGuard < 0){
            MEM_BLOCK block(-blockGuard) <bgcolor=0x111111, comment="free">;
            unusedBlocks += 1;
        }else if(blockGuard == 0){
            MEM_BLOCK block(0) <bgcolor=0x0000FF, comment="invalid!">;
            emptyBlocks += 1;
        }
    }
    totalBlocks = unusedBlocks + emptyBlocks + fullBlocks;
}memory;

if(exists(rootElement) && rootElement.signature == 1095320664){
    //index

    struct IDX_ENTRY;

    struct IDX_DIRECTORY(uint64 endOfEntry){
        uint32 nameOffset;
        uint32 packIdx;

        local uint64 eos <hidden=true>;
        eos  = FTell();
        FSeek(endOfEntry+nameOffset);
        char name[] <bgcolor=cLtGreen>;

        if(packIndex[packIdx].offset > minimalOffset){
            FSeek(packIndex[packIdx].offset);
            IDX_ENTRY entries;
        }

        FSeek(eos);
    };

    struct IDX_FILE(uint64 endOfEntry){
        uint32 nameOffset;
        uint32 flags;
        uint64 writeTime;
        uint64 uncompressedSize;
        uint64 compressedSize;
        uint8 hash[20];
        uint32 unk1;

        local uint64 eos <hidden=true>;
        eos = FTell();
        FSeek(endOfEntry+nameOffset);
        char name[] <bgcolor=cLtGreen>;
        FSeek(eos);
    };

    struct IDX_ENTRY{
        uint32 directory_count;
        uint32 file_count;
        local uint64 eos <hidden=true>;
        eos = FTell() + directory_count*8 + file_count*56;
        if(directory_count > 0)
            IDX_DIRECTORY directories(eos)[directory_count] <optimize=false>;
        if(file_count > 0)
            IDX_FILE files(eos)[file_count] <optimize=false>;
    };

    if(rootElement.rootIdx > 0){
        struct FOLDERS{
            local uint64 eos <hidden=true>;
            eos = FTell();
          //  local uint32 i = 0;
          /*  for(i=0;i<header.packIndexCount;++i){
                if(packIndex[i].size > 16){
                    FSeek(packIndex[i].offset);
                    if(i == rootElement.rootIdx){
                        IDX_ENTRY rootFolder <bgcolor=0x660022>;
                    }else{
                        IDX_ENTRY folder <bgcolor=0x660022>;
                    }
                }
            }*/

            FSeek(packIndex[rootElement.rootIdx].offset);
            IDX_ENTRY rootFolder <bgcolor=0x660022>;
            FSeek(eos);

        }folders;
    }

}

if(exists(rootElement) && rootElement.signature == 1094799939){
    //archive

    struct ARCHIVE_ENTRY{
        uint32 packIdx;
        uint8 hash[20];
        uint64 size;
    };

    if(exists(packs) && exists(rootElement)){
        FSeek(packs[rootElement.rootIdx].offset);
        ARCHIVE_ENTRY archiveEntries[rootElement.entryCount] <bgcolor=0x001177>;
    }

}
